构建图
构建图的第一步，是创建源op(source op)。源op不需要任何输入，例如常量(Constant)。源op的输出被传递给其它op做运算。
Python库中，op构造器的返回值代表被构造出的op的输出，这些返回值可以传递给其它op构造器作为输入。
TensorFlow Python库有一个默认图(default graph)，op构造器可以为其增加节点。这个默认图对许多程序来说已经足够用了。

	# -*- encoding: utf8 -*-
	import tensorflow as tf
	
	# 创建一个常量op,产生一个1X2矩阵，这个op被作为一个节点加到默认图中。
	# 构造器的返回值代表该常量op的返回值。
	matrix1 = tf.constant([[3., 3.]])
	
	# 创建另一个常量op,产生一个2X1的矩阵。
	matrix2 = tf.constant([[2.], [2.]])
	
	# 创建一个矩阵乘法matmul op,把'matrix1'和'matrix2'作为输入。
	# 返回值'product'代表矩阵乘法的结果。
	product = tf.matmul(matrix1, matrix2)

默认图中现在有三个节点，两个constant() op，和一个matmul() op。为了真正进行矩阵相乘运算，并得到矩阵乘法的结果，你必须在会话里启动这个图。

在一个会话中启动图
构造阶段完成后，才能启动图。启动图的第一步是创建一个Session对象，如果无任何创建参数，会话构造器将启动默认图。
	# 启动默认图
	sess = tf.Session()
	
	# 调用sess的'run()'方法来执行矩阵相乘op，传入'product'作为该方法的参数。
	# 上面提到，'product'代表了矩阵乘法op的输出，传入它是向方法表明，我们希望取回矩阵乘法op的输出。
	# 整个执行过程是自动化的，会话负责传递op所需的全部输入，op通常是并发执行的。
	# 函数调用'run(product)'出发了图中三个op(两个常量op和一个矩阵乘法op)的执行。
	# 返回值'result'是一个numpy.ndarray对象。
	result = sess.run(product)
	print result
	# ==> [[12.]]
	
	# 任务完成，关闭会话
	sess.close()
Session对象在使用完后需要关闭以释放资源。除了显式调用close外，也可以使用"with"代码块来自动完成关闭动作。
	with tf.Session() as sess:
		result = sess.run(product)
		print result
在实现上，TensorFlow将图形定义转换成分布式执行的操作，以充分利用可用的计算资源(如CPU或GPU)。一般不需要显式指定使用CPU还是GPU，TensorFlow能自动检测。如果检测到GPU，TensorFlow会尽可能地利用找到的第一个GPU来执行操作。
如果机器上有超过一个可用的GPU，除第一个外的其他GPU默认是不参与计算的。为了让TensorFlow使用这些GPU，你必须将op明确指派给它们执行。with...Device语句用来指派特定的CPU或GPU执行操作：
	with tf.Session() as sess:
		with tf.device("/gpu:1"):
			matrix1 = tf.constant([[3., 3.]])
			matrix2 = tf.constant([[2.], [2.]])
			product = tf.matmul(matrix1, matrix2)
			... ...
设备用字符串进行标识。目前支持的设备包括：
"/cpu:0"：机器的CPU。
"/gpu:0"：机器的第一个GPU，如果有的话。
"/gpu:1"：机器的第二个GPU，以此类推。

交互式使用
文档中的Python示例使用了一个会话Session来启动图，并调用Session.run()方法执行操作。
为了便于使用诸如IPython之类的Python交互环境，可以使用InteractiveSession代替Session类，使用Tensor.eval()和Operation.run()方法代替Session.run()。这样可以避免使用一个变量来持有会话。
	# -*- encoding: utf8 -*-
	# 进入一个交互式TensorFlow会话
	import tensorflow as tf
	sess = tf.InteractiveSession()
	
	x = tf.Variable([1.0, 2.0])
	a = tf.constant([3.0, 3.0])
	
	# 使用初始化器initializer op的run()方法初始化'x'
	x.initializer.run()
	
	# 增加一个减法sub op， 从'x'减去'a'。运行减法op，输出结果
	sub = tf.sub(x, a)
	print sub.eval()
	# ==> [-2., -1.]

Tensor
TensorFlow程序使用tensor数据结构来代表所有的数据，计算图中，操作间传递的数据都是tensor。你可以把TensorFlow tensor看作是一个n维的数组或列表。一个tensor包含一个静态类型rank，和一个shape。

变量
变量维护图执行过程中的状态信息。下面的例子演示了如何使用变量实现简单的计数器。
	# -*- encoding: utf8 -*-
	import tensorflow as tf
	
	# 创建一个变量，初始化为标量0.
	state = tf.Variable(0, name="counter")
	
	# 创建一个op，其作用是使state增加1
	one = tf.constant(1)
	new_value = tf.add(state, one)
	update = tf.assign(state, new_value)
	
	# 启动图后，变量必须先经过初始化(init) op初始化
	# 首先必须增加一个初始化op到图中
	init_op = tf.initialize_all_variables()
	
	# 启动图，运行op
	with tf.Session() as sess:
		# 运行init op
		sess.run(init_op)
		# 打印state的初始化值
		print sess.run(state)
		# 运行op，更新state，并打印state
		for _ in range(3):
			sess.run(update)
			print sess.run(state)
	
	# 输出：
	# 0
	# 1
	# 2
	# 3
代码中assign()操作是图所描绘的表达式的一部分，正如add()操作一样，所以调用run()执行表达式之前，它并不会真正执行复制操作。
通常会将一个统计模型中的参数表示为一组向量。例如，你可以将一个神经网络的权重作为某个变量存储在一个tensor中。
在训练过程中，通过重复运行训练图，更新这个tensor。

Fetch
为了取回操作的输出内容，可以在使用Session对象的run()调用执行图时，传入一些tensor，这些tensor将帮你取回结果。在之前的例子中，我们只取回了单个节点state，但是也可以取回多个tensor：
	# -*- encoding: utf8 -*-
	import tensorflow as tf
	
	input1 = tf.constant(3.0)
	input2 = tf.constant(2.0)
	input3 = tf.constant(5.0)
	intermed = tf.add(input2, input3)
	mul = tf.mul(input1, intermed)
	
	with tf.Session() as sess:
		result = sess.run([mul, intermed])
		print result
	
	# 输出：
	# [21.0, 7.0]
需要获取的多个tensor值，在op的一次运行中一起获得(而不是逐个去获取tensor)。

Feed
上述示例在计算图中引入了tensor，以常量或变量的形式存储。TensorFlow还提供了feed机制，该机制可以临时替代图中的任意操作中的tensor，可以对图中任何操作提交补丁，直接插入一个tensor。
feed使用一个tensor值临时替换一个操作的输出结果。你可以提供feed数据作为run()调用的参数。feed只在调用它的方法内有效，方法结束，feed就会消失。最常见的用例是将某些特殊的操作指定为feed操作，标记的方法是使用tf.placeholder()为这些操作创建占位符。
	# -*- encoding: utf8 -*-
	import tensorflow as tf
	
	input1 = tf.placeholder(tf.float32)
	input2 = tf.placeholder(tf.float32)
	output = tf.mul(input1, input2)
	
	with tf.Session() as sess:
		print sess.run([output], feed_dict={input1:[7.], input2:[2.]})
	
	# 输出
	# [array([ 14.], dtype=float32)]
如果没有正确提供feed，placeholder()操作将会产生错误。
